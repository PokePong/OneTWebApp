@using OneTWebApp.Client.Models
@using MudBlazor
@rendermode InteractiveAuto
@inject IDialogService DialogService
@* Required *@
<MudThemeProvider/>
<MudPopoverProvider/>

@* Needed for dialogs *@
<MudDialogProvider/>

@* Needed for snackbars *@
<MudSnackbarProvider/>

<MudExpansionPanels>
    @foreach (var app in _apps) {
        <MudExpansionPanel>
            <TitleContent>
                <AppPanel AppModel="app" CreatedInstance="@(async () => await Test())"/>
            </TitleContent>
            <ChildContent>
                <MudStack Spacing="2">
                    <InstancePanel/>
                    <InstancePanel/>
                    <InstancePanel/>
                </MudStack>
            </ChildContent>
        </MudExpansionPanel>
    }
</MudExpansionPanels>

<MudButton @onclick="OpenDialogAsync" Variant="Variant.Filled" Color="Color.Primary">
    Open simple dialog
</MudButton>

@code {

    private AppModel[] _apps;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();

        _apps = [
            new AppModel {
                AppType = AppType.Docs,
                DeployedState = DeployState.Undeployed
            },
            new AppModel {
                AppType = AppType.Tchap,
                DeployedState = DeployState.Undeployed
            }
        ];
    }

    private async Task Test() {
        Console.WriteLine("ab");
        var res = await _httpClient.GetAsync("api/Instance");
    }

    private Task OpenDialogAsync() {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        return DialogService.ShowAsync<DialogUsageExample_Dialog>("Simple Dialog", options);
    }

}